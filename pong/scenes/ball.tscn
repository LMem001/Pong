[gd_scene load_steps=4 format=3 uid="uid://b6o8mexk1ndvs"]

[ext_resource type="Texture2D" uid="uid://de1072qbixjca" path="res://images/ball.png" id="1_qlald"]

[sub_resource type="GDScript" id="GDScript_76cwp"]
script/source = "extends Area2D

var velocity = Vector2(0, 0)
var initial_position = Vector2()
var body_coll
var x_direction = 230

func _physics_process(delta):
	# Move
	position += velocity * delta

func _ready():
	initial_position = position
	set_process_unhandled_input(true)

func _process(delta):
	# Move the ball if the vector is not 0
	if velocity != Vector2(0, 0):
		position += velocity * delta

func _unhandled_input(event):
	# Verifica se il tasto \"start_game\" è premuto e la velocità è zero
	if event.is_action_pressed(\"start_game\") and velocity == Vector2(0, 0):
		start_game()

func start_game():
	# set velocity
	velocity = Vector2(x_direction, 230) 
	print(\"Gioco iniziato con velocità: \", velocity)
	
func reset_ball(direction):
	# Reset Ball
	set_x_direction(direction)
	position = initial_position
	velocity = Vector2(0, 0)

# var direction: String left or right
func set_x_direction(direction):
	# Reset Ball
	if direction == \"right\":
		x_direction = 230
	else:
		x_direction = -230
	
func _on_body_entered(body):
	body_coll = body.name
	print(\"Collision with: \", body_coll)
	if body_coll == \"Player1\" or body_coll == \"Player2\":
		print(\"Collision with player!\")
		# Invert ball x direction
		velocity.x = -velocity.x
	#elif body_coll == \"GoalLeft\" or body_coll == \"GoalRight\":
		#print(\"Goal\")
		#reset_ball()
	elif body_coll == \"Walls\":
		print(\"Collision con il wall!\")
		# Invert ball y direction
		velocity.y = -velocity.y
"

[sub_resource type="CircleShape2D" id="CircleShape2D_ffqr2"]
radius = 4.0

[node name="Ball" type="Area2D"]
script = SubResource("GDScript_76cwp")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = ExtResource("1_qlald")

[node name="BallCollision" type="CollisionShape2D" parent="."]
unique_name_in_owner = true
shape = SubResource("CircleShape2D_ffqr2")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
